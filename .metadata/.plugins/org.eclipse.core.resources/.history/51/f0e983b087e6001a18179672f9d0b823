package Phoebe;

import java.util.List;

public class MarsRovers {

	private final char E = 'E'; // East
	private final char S = 'S'; // South
	private final char W = 'W'; // West
	private final char N = 'N'; // North
	private final String SPLITSIGNAL = " ";

	public void printAnswer(List<Rovers> ansList) {
		for (Rovers rover : ansList) {
			System.out.println(rover.getX() + " " + rover.getY() + " " + rover.getDirection());
		}
	}

	private Rovers moveforward(Rovers preRover) {
		if (preRover.getDirection() == E) {
			preRover.setX(preRover.getX() + 1);
		} else if (preRover.getDirection() == S) {
			preRover.setY(preRover.getY() - 1);
		} else if (preRover.getDirection() == W) {
			preRover.setX(preRover.getX() - 1);
		} else {
			preRover.setY(preRover.getY() + 1);
		}

		return preRover;
	}

	private Rovers turnRight(Rovers preRover) {
		if (preRover.getDirection() == E) {
			preRover.setDirection(S);
		} else if (preRover.getDirection() == S) {
			preRover.setDirection(W);
		} else if (preRover.getDirection() == W) {
			preRover.setDirection(N);
		} else {
			preRover.setDirection(E);
		}

		return preRover;
	}

	private Rovers turnLeft(Rovers preRover) {
		if (preRover.getDirection() == E) {
			preRover.setDirection(N);
		} else if (preRover.getDirection() == S) {
			preRover.setDirection(E);
		} else if (preRover.getDirection() == W) {
			preRover.setDirection(S);
		} else {
			preRover.setDirection(W);
		}

		return preRover;
	}

	private Rovers decodeCommends(Rovers basePt, String commends) {
		for (int i = 0; i < commends.length(); i++) {
			if (commends.charAt(i) == 'L') {
				basePt = this.turnLeft(basePt);
			} else if (commends.charAt(i) == 'R') {
				basePt = this.turnRight(basePt);
			} else {
				basePt = this.moveforward(basePt);
			}
		}

		return basePt;
	}

	private Rovers decodeStartPt(String inputCommends) {
		if (inputCommends == null) {
			return null;
		}

		String[] commendArray = inputCommends.split(SPLITSIGNAL);
		if (commendArray.length != 3) {
			return null;
		}

		Rovers rover = new Rovers(Integer.parseInt(commendArray[0]), Integer.parseInt(commendArray[1]),
				commendArray[2].charAt(0));

		return rover;
	}

	public List<Rovers> doMarsExploring(List<String> inputCommendsData) {

		for (int i = 0; i < inputCommendsData.size(); i++) {
			if (i == 0) {
				continue;
			}
			Rovers rover = null;
			if (i % 2 == 1) {
				rover = decodeStartPt(inputCommendsData.get(i));
			} else {
				
			}
		}

		return null;
	}

}
