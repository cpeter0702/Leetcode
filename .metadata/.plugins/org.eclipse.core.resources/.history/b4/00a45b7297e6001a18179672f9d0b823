package Phoebe;

import org.junit.Assert;
import org.junit.Test;
import org.mockito.Mockito;


public class MarsRoversTest {
	
	
	@Test
	public void turnLeftNormalTesting() {
		MarsRovers marsRovers = new MarsRovers();
		Rovers rover = new Rovers(1, 1, 'E');
		marsRovers.turnLeft(rover);
		Assert.assertEquals('N', rover.getDirection());
		
		rover = new Rovers(1, 1, 'S');
		marsRovers.turnLeft(rover);
		Assert.assertEquals('E', rover.getDirection());
		
		rover = new Rovers(1, 1, 'W');
		marsRovers.turnLeft(rover);
		Assert.assertEquals('S', rover.getDirection());
		
		rover = new Rovers(1, 1, 'N');
		marsRovers.turnLeft(rover);
		Assert.assertEquals('W', rover.getDirection());
		
		
	}
	
	@Test(expected = IllegalArgumentException.class)
	public void turnLeftExceptionTesting() {
		MarsRovers marsRovers = new MarsRovers();
		Rovers rover = new Rovers(1, 1, 'K');
		marsRovers.turnLeft(rover);
	}
	
	@Test
	public void turnRightNormalTesting() {
		MarsRovers marsRovers = new MarsRovers();
		Rovers rover = new Rovers(1, 1, 'E');
		marsRovers.turnRight(rover);
		Assert.assertEquals('S', rover.getDirection());
		
		rover = new Rovers(1, 1, 'S');
		marsRovers.turnRight(rover);
		Assert.assertEquals('W', rover.getDirection());
		
		rover = new Rovers(1, 1, 'W');
		marsRovers.turnRight(rover);
		Assert.assertEquals('N', rover.getDirection());
		
		rover = new Rovers(1, 1, 'N');
		marsRovers.turnRight(rover);
		Assert.assertEquals('E', rover.getDirection());
		
		
	}
	
	@Test(expected = IllegalArgumentException.class)
	public void turnRightExceptionTesting() {
		MarsRovers marsRovers = new MarsRovers();
		Rovers rover = new Rovers(1, 1, 'K');
		marsRovers.turnRight(rover);
	}
	
	@Test
	public void moveForwardNormalTesting() {
		MarsRovers marsRovers = new MarsRovers();
		Rovers rover = new Rovers(1, 1, 'E');
		marsRovers.moveForward(rover);
		Assert.assertEquals('E', rover.getDirection());
		Assert.assertEquals(2, rover.getX());
		
		rover = new Rovers(1, 1, 'S');
		marsRovers.moveForward(rover);
		Assert.assertEquals('S', rover.getDirection());
		Assert.assertEquals(0, rover.getY());
		
		rover = new Rovers(1, 1, 'W');
		marsRovers.moveForward(rover);
		Assert.assertEquals('W', rover.getDirection());
		Assert.assertEquals(0, rover.getX());
		
		rover = new Rovers(1, 1, 'N');
		marsRovers.moveForward(rover);
		Assert.assertEquals('N', rover.getDirection());
		Assert.assertEquals(2, rover.getY());
		
	}
	@Test
	public void decodeDirectionCommendsTesting() {
		MarsRovers marsRovers = new MarsRovers();
		Rovers basePt = new Rovers (1, 2, 'N');
		String commends = "LMLMLMLMM";
		Rovers rover = marsRovers.decodeDirectionCommends(basePt, commends);
		Assert.assertEquals(1, rover.getX());
		Assert.assertEquals(3, rover.getY());
		Assert.assertEquals('N', rover.getDirection());
		
	}
	
	
}
